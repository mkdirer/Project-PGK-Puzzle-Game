#ifndef __GUIMyFrame1__
#define __GUIMyFrame1__

/**
@file
Subclass of MyFrame, which is generated by wxFormBuilder.
*/
#include "GUI.h"
#include "START.h"
#include "INFO.h"
#include "HELP.h"
#include "PARTITION.h"
#include "RANKING.h"

/**
Klasa Picture reprezentujaca obrazek, posiadajaca konstrktory oraz nastepujace skladowe:
- _image - przechowuje zdjecie,
- _id - ID pojedynczego elementu obrazka,
- _pos - pozycja elementu na panelu
- _mirror_ver - informacja mowiaca, czy element obrazka jest odbity symetrycznie wzgledem osi pionowej
- _mirror_hor - informacja mowiaca, czy element obrazka jest odbity symetrycznie wzgledem osi poziomej
*/
class Picture
{
public:
	Picture() = default;
	Picture(wxImage image, int id, wxPoint pos) : _image(image), _id(id), _pos(pos),_mirror_ver(false), _mirror_hor(false) {}
	wxImage _image;
	int _id;
	wxPoint _pos;
	bool _mirror_ver;
	bool _mirror_hor;

};


//// end generated include

/**
Klasa GUIMyFrame1, ktora dziedziczy po MyFrame, odpowiedzialna jest za logike zdarzen grze
*/
class GUIMyFrame1 : public MyFrame
{
	protected:
		// Handlers for MyFrame1 events.
		
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Nowa Gra rozpoczynajac rozgrywke o ustalonej wersji oraz liczbie podzialow
		*/
		void OnClickNewGame(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Podglad wyswietlajac prawidlowe ulozenie obrazka
		*/
		void OnClickPreview(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Nowa Gra, znajdujace sie w pasku Menu, rozpoczynajac rozgrywke o ustalonej
		wersji oraz liczbie podzialow
		*/
		void MenuNewGame(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Podglad, znajdujacy sie w pasku Menu, wyswietlajac prawidlowe ulozenie obrazka
		*/
		void MenuPreview(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Zmien Nick, znajdujacy sie w pasku Menu, umozliwiajac graczowi dokonanie
		zmiany Nicku
		*/
		void MenuChangeNick(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Zmien liczbe podzialow, znajdujacy sie w pasku Menu, umozliwiajac graczowi
		dokonanie zmiany liczby podzialow
		*/
		void MenuChangeDivision(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Exit, znajdujacy sie w pasku Menu, umozliwiajac graczowi opuszczenie gry
		*/
		void MenuExit(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Info, znajdujacy sie w pasku About, wyswietlajac podstawowe informacje o grze
		*/
		void MenuInfo(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Ranking, znajdujacy sie w pasku About, wyswietlajac ranking graczy, ktorzy
		skonczyli ukladanie danego obrazka
		*/
		void MenuRanking(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Help, znajdujacy sie w pasku About, wyswietlajac pomocne informacje o programie
		razem z adresem kontaktowym
		*/
		void MenuHelp(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Wersja 1, znajdujacy sie w pasku Menu, pozwalajac graczowi na zmiane sposobu
		ukladania obrazka
		*/
		void ChoiceA(wxCommandEvent& event);
		/**
		Metoda, ktora obsluguje zdarzenie klikniecia w przycisk Wersja 2, znajdujacy sie w pasku Menu, pozwalajac graczowi na zmiane sposobu
		ukladania obrazka
		*/
		void ChoiceB(wxCommandEvent& event);
		/**
		Metoda, ktora nasluchuje zdarzenia zamkniecia okna i wyswietla odpowiedni komunikat w przypadku zakonczenia gry
		*/
		void OnExit(wxCloseEvent& event);
		/**
		Metoda, ktora nasluchuje zdarzenia poruszania myszki po oknie gry
		*/
		void Mouse_Move(wxMouseEvent& event);
		/**
		Metoda, ktora nasluchuje zdarzenia klikniecia klawisza TAB oraz wyswietlenia prawidlowego ulozenia obrazka
		*/
		void TAB(wxKeyEvent& event);
		/**
		Metody obslugujace zdarzenie klikniecia na element obrazka w pierszej wersji oraz na krawedz w drugiej wersji
		*/
		void Click(wxMouseEvent& event);
		void Click1(int x,int y);
		/**
		Metoda, ktora po kazdej sekundzie zapisuje obecny czas trwania gry oraz wypisuje go w oknie
		*/
		void Timer(wxTimerEvent& event);
		/**
		Metoda, ktora wyswietla podglad prawidlowo ulozonego obrazka dla danej wersji
		*/
		void Preview();
		/**
		Metoda, ktora wyswietla odpowiedni komunikat oraz zapisuje wynik do bazy danych po wygranej gracza
		*/
		void Win();
		/**
		Metoda ktora sprawdza warunek zakonczenia gry, czyli poprawnosc ulozenia obrazka
		*/
		void EndOfTheGame();
		/**
		Metoda, ktorej wywolanie powoduje uruchomienie timera
		*/
		void StartTimer();
		/**
		Metoda, ktorej wywolanie powoduje wymieszanie elementow obrazka w taki sposob, aby mozliwe bylo jego ulozenie
		*/
		void Mix();

		

		/**
		Obiekt wskaznikowy na okno Startu, w ktorym zapisujemy swoj nick
		*/
		MyDialog1* dialog_START;
		/**
		Obiekt wskaznikowy na okno Info, ktore wyswietla informacje o grze
		*/
		MyDialog2* dialog_INFO;
		/**
		Obiekt wskaznikowy na okno Help, ktore zawiera informacje pomocne dla gracza
		*/
		MyDialog3* dialog_HELP;
		/**
		Obiekt wskaznikowy na okno Partition, w ktorym wybieramy liczbe podzialow
		*/
		MyDialog4* dialog_PARTITION;
		/**
		Obiekt wskaznikowy na okno Ranking, ktore wyswietla liste informacji o wszystkich wygranych rozgrywkach
		*/
		MyDialog5* dialog_RANKING;


		/**
		Zmienna przechowujaca caly (oryginalny) obrazek
		*/
		wxImage image;
		/**
		Zmienna przechowujaca wspolrzedne pustego kwadratu w pierwszej wersji gry
		*/
		wxPoint empty;
		/**
		Zmienna vector przechowujaca wszystkie elementy obrazka (obiekty klasy Picture)
		*/
		std::vector<Picture> o;
		/**
		Zmienna vector przechowujaca wspolrzedne pionowych krawedzi
		*/
		std::vector<wxPoint> ver;
		/**
		Zmienna vector przechowujaca wspolrzedne poziomych krawedzi
		*/
		std::vector<wxPoint> hor;
		/**
		Zmienna vector przechowujaca wspolrzedne srodkow (punktow przeciecia krawedzi)
		*/
		std::vector<wxPoint> mid;
		/**
		Zmienna timer, ktora odlicza czas gry
		*/
		wxTimer* WxTimer1;
		/**
		Zmienna przechowujaca informacje o obecnym czasie gry
		*/
		Time gametime;
		/**
		Zmienna typu bool przechowujaca informacje o stanie gry (czy jest w trakcie trwania)
		*/
		bool flag;
		/**
		Zmienna przechowujaca szerokosc krawedzi
		*/
		int step;
		/**
		Zmienna przechowujaca liczbe krokow potrzebnych do ulozenia obrazka
		*/
		int number_of_steps;
		/**
		Zmienna przechowujaca dlugosc pojedynczego elementu obrazka
		*/
		int height;
		/**
		Zmienna przechowujaca szerokosc pojedynczego elementu obrazka
		*/
		int width;
		/**
		Zmienna przechowujaca stopien posortowania dla drugiej wersji
		*/
		int sort_degree;
		/**
		Zmienna przechowujaca nazwe wylosowanego obrazka
		*/
		string name_of_image;

		
	public:
		/**
		Konstrukotr, ktory rozpoczyna rogrywke i ustawia parametry jako wartosci domyslne
		*/
		GUIMyFrame1(wxWindow* parent);
		/**
		Metoda, ktora dzieli obrazek, zapisuje jego elementy do vectora i wypisuje ten vector
		*/
		void Draw();
		/**
		Metoda wywolujaca okno startowe
		*/
		void CallStart();
		/**
		Metoda wywolujaca okno, w ktorym wybieramy liczbe podzialow obrazka
		*/
		void CallDivision();
		/**
		Zmienna przechowujaca informacje o liczbie podzialow obrazka
		*/
		Division division;
		/**
		Zmienna przechowujaca nick gracza
		*/
		string nick;
		
	//// end generated class members

};

#endif // __GUIMyFrame1__
